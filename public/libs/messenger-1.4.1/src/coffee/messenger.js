// Generated by CoffeeScript 1.9.1
(function() {
  var $, ActionMessenger, BaseView, Events, RetryingMessage, _, _Message, _Messenger, ref, ref1, ref2,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  _ = (ref = window._) != null ? ref : window.Messenger._;

  Events = (ref1 = typeof Backbone !== "undefined" && Backbone !== null ? Backbone.Events : void 0) != null ? ref1 : window.Messenger.Events;

  BaseView = (function() {
    function BaseView(options) {
      $.extend(this, Events);
      if (_.isObject(options)) {
        if (options.el) {
          this.setElement(options.el);
        }
        this.model = options.model;
      }
      this.initialize.apply(this, arguments);
    }

    BaseView.prototype.setElement = function(el) {
      this.$el = $(el);
      return this.el = this.$el[0];
    };

    BaseView.prototype.delegateEvents = function(events) {
      var delegateEventSplitter, eventName, key, match, method, results, selector;
      if (!(events || (events = _.result(this, "events")))) {
        return;
      }
      this.undelegateEvents();
      delegateEventSplitter = /^(\S+)\s*(.*)$/;
      results = [];
      for (key in events) {
        method = events[key];
        if (!_.isFunction(method)) {
          method = this[events[key]];
        }
        if (!method) {
          throw new Error("Method \"" + events[key] + "\" does not exist");
        }
        match = key.match(delegateEventSplitter);
        eventName = match[1];
        selector = match[2];
        method = _.bind(method, this);
        eventName += ".delegateEvents" + this.cid;
        if (selector === '') {
          results.push(this.jqon(eventName, method));
        } else {
          results.push(this.jqon(eventName, selector, method));
        }
      }
      return results;
    };

    BaseView.prototype.jqon = function(eventName, selector, method) {
      var ref2;
      if (this.$el.on != null) {
        return (ref2 = this.$el).on.apply(ref2, arguments);
      } else {
        if (method == null) {
          method = selector;
          selector = void 0;
        }
        if (selector != null) {
          return this.$el.delegate(selector, eventName, method);
        } else {
          return this.$el.bind(eventName, method);
        }
      }
    };

    BaseView.prototype.jqoff = function(eventName) {
      var ref2;
      if (this.$el.off != null) {
        return (ref2 = this.$el).off.apply(ref2, arguments);
      } else {
        this.$el.undelegate();
        return this.$el.unbind(eventName);
      }
    };

    BaseView.prototype.undelegateEvents = function() {
      return this.jqoff(".delegateEvents" + this.cid);
    };

    BaseView.prototype.remove = function() {
      this.undelegateEvents();
      return this.$el.remove();
    };

    return BaseView;

  })();

  _Message = (function(superClass) {
    extend(_Message, superClass);

    function _Message() {
      return _Message.__super__.constructor.apply(this, arguments);
    }

    _Message.prototype.defaults = {
      hideAfter: 10,
      scroll: true,
      closeButtonText: "&times;"
    };

    _Message.prototype.initialize = function(opts) {
      if (opts == null) {
        opts = {};
      }
      this.shown = false;
      this.rendered = false;
      this.messenger = opts.messenger;
      return this.options = $.extend({}, this.options, opts, this.defaults);
    };

    _Message.prototype.show = function() {
      var wasShown;
      if (!this.rendered) {
        this.render();
      }
      this.$message.removeClass('messenger-hidden');
      wasShown = this.shown;
      this.shown = true;
      if (!wasShown) {
        return this.trigger('show');
      }
    };

    _Message.prototype.hide = function() {
      var wasShown;
      if (!this.rendered) {
        return;
      }
      this.$message.addClass('messenger-hidden');
      wasShown = this.shown;
      this.shown = false;
      if (wasShown) {
        return this.trigger('hide');
      }
    };

    _Message.prototype.cancel = function() {
      return this.hide();
    };

    _Message.prototype.update = function(opts) {
      var ref2;
      if (_.isString(opts)) {
        opts = {
          message: opts
        };
      }
      $.extend(this.options, opts);
      this.lastUpdate = new Date();
      this.rendered = false;
      this.events = (ref2 = this.options.events) != null ? ref2 : {};
      this.render();
      this.actionsToEvents();
      this.delegateEvents();
      this.checkClickable();
      if (this.options.hideAfter) {
        this.$message.addClass('messenger-will-hide-after');
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
        }
        this._hideTimeout = setTimeout((function(_this) {
          return function() {
            return _this.hide();
          };
        })(this), this.options.hideAfter * 1000);
      } else {
        this.$message.removeClass('messenger-will-hide-after');
      }
      if (this.options.hideOnNavigate) {
        this.$message.addClass('messenger-will-hide-on-navigate');
        if ((typeof Backbone !== "undefined" && Backbone !== null ? Backbone.history : void 0) != null) {
          Backbone.history.on('route', (function(_this) {
            return function() {
              return _this.hide();
            };
          })(this));
        }
      } else {
        this.$message.removeClass('messenger-will-hide-on-navigate');
      }
      return this.trigger('update', this);
    };

    _Message.prototype.scrollTo = function() {
      if (!this.options.scroll) {
        return;
      }
      return $.scrollTo(this.$el, {
        duration: 400,
        offset: {
          left: 0,
          top: -20
        }
      });
    };

    _Message.prototype.timeSinceUpdate = function() {
      if (this.lastUpdate) {
        return (new Date) - this.lastUpdate;
      } else {
        return null;
      }
    };

    _Message.prototype.actionsToEvents = function() {
      var act, name, ref2, results;
      ref2 = this.options.actions;
      results = [];
      for (name in ref2) {
        act = ref2[name];
        results.push(this.events["click [data-action=\"" + name + "\"] a"] = ((function(_this) {
          return function(act) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              _this.trigger("action:" + name, act, e);
              return act.action.call(_this, e, _this);
            };
          };
        })(this))(act));
      }
      return results;
    };

    _Message.prototype.checkClickable = function() {
      var evt, name, ref2, results;
      ref2 = this.events;
      results = [];
      for (name in ref2) {
        evt = ref2[name];
        if (name === 'click') {
          results.push(this.$message.addClass('messenger-clickable'));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    _Message.prototype.undelegateEvents = function() {
      var ref2;
      _Message.__super__.undelegateEvents.apply(this, arguments);
      return (ref2 = this.$message) != null ? ref2.removeClass('messenger-clickable') : void 0;
    };

    _Message.prototype.parseActions = function() {
      var act, actions, n_act, name, ref2;
      actions = [];
      ref2 = this.options.actions;
      for (name in ref2) {
        act = ref2[name];
        n_act = $.extend({}, act);
        n_act.name = name;
        if (n_act.label == null) {
          n_act.label = name;
        }
        actions.push(n_act);
      }
      return actions;
    };

    _Message.prototype.template = function(opts) {
      var $action, $actions, $cancel, $link, $message, $text, action, i, len, ref2;
      $message = $("<div class='messenger-message message alert " + opts.type + " message-" + opts.type + " alert-" + opts.type + "'>");
      if (opts.showCloseButton) {
        $cancel = $('<button type="button" class="messenger-close" data-dismiss="alert">');
        $cancel.html(opts.closeButtonText);
        $cancel.click((function(_this) {
          return function() {
            _this.cancel();
            return true;
          };
        })(this));
        $message.append($cancel);
      }
      $text = $("<div class=\"messenger-message-inner\">" + opts.message + "</div>");
      $message.append($text);
      if (opts.actions.length) {
        $actions = $('<div class="messenger-actions">');
      }
      ref2 = opts.actions;
      for (i = 0, len = ref2.length; i < len; i++) {
        action = ref2[i];
        $action = $('<span>');
        $action.attr('data-action', "" + action.name);
        $link = $('<a>');
        $link.html(action.label);
        $action.append($('<span class="messenger-phrase">'));
        $action.append($link);
        $actions.append($action);
      }
      $message.append($actions);
      return $message;
    };

    _Message.prototype.render = function() {
      var opts;
      if (this.rendered) {
        return;
      }
      if (!this._hasSlot) {
        this.setElement(this.messenger._reserveMessageSlot(this));
        this._hasSlot = true;
      }
      opts = $.extend({}, this.options, {
        actions: this.parseActions()
      });
      this.$message = $(this.template(opts));
      this.$el.html(this.$message);
      this.shown = true;
      this.rendered = true;
      return this.trigger('render');
    };

    return _Message;

  })(BaseView);

  RetryingMessage = (function(superClass) {
    extend(RetryingMessage, superClass);

    function RetryingMessage() {
      return RetryingMessage.__super__.constructor.apply(this, arguments);
    }

    RetryingMessage.prototype.initialize = function() {
      RetryingMessage.__super__.initialize.apply(this, arguments);
      return this._timers = {};
    };

    RetryingMessage.prototype.cancel = function() {
      this.clearTimers();
      this.hide();
      if ((this._actionInstance != null) && (this._actionInstance.abort != null)) {
        return this._actionInstance.abort();
      }
    };

    RetryingMessage.prototype.clearTimers = function() {
      var name, ref2, ref3, timer;
      ref2 = this._timers;
      for (name in ref2) {
        timer = ref2[name];
        clearTimeout(timer);
      }
      this._timers = {};
      return (ref3 = this.$message) != null ? ref3.removeClass('messenger-retry-soon messenger-retry-later') : void 0;
    };

    RetryingMessage.prototype.render = function() {
      var action, name, ref2, results;
      RetryingMessage.__super__.render.apply(this, arguments);
      this.clearTimers();
      ref2 = this.options.actions;
      results = [];
      for (name in ref2) {
        action = ref2[name];
        if (action.auto) {
          results.push(this.startCountdown(name, action));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    RetryingMessage.prototype.renderPhrase = function(action, time) {
      var phrase;
      phrase = action.phrase.replace('TIME', this.formatTime(time));
      return phrase;
    };

    RetryingMessage.prototype.formatTime = function(time) {
      var pluralize;
      pluralize = function(num, str) {
        num = Math.floor(num);
        if (num !== 1) {
          str = str + 's';
        }
        return 'in ' + num + ' ' + str;
      };
      if (Math.floor(time) === 0) {
        return 'now...';
      }
      if (time < 60) {
        return pluralize(time, 'second');
      }
      time /= 60;
      if (time < 60) {
        return pluralize(time, 'minute');
      }
      time /= 60;
      return pluralize(time, 'hour');
    };

    RetryingMessage.prototype.startCountdown = function(name, action) {
      var $phrase, ref2, remaining, tick;
      if (this._timers[name] != null) {
        return;
      }
      $phrase = this.$message.find("[data-action='" + name + "'] .messenger-phrase");
      remaining = (ref2 = action.delay) != null ? ref2 : 3;
      if (remaining <= 10) {
        this.$message.removeClass('messenger-retry-later');
        this.$message.addClass('messenger-retry-soon');
      } else {
        this.$message.removeClass('messenger-retry-soon');
        this.$message.addClass('messenger-retry-later');
      }
      tick = (function(_this) {
        return function() {
          var delta;
          $phrase.text(_this.renderPhrase(action, remaining));
          if (remaining > 0) {
            delta = Math.min(remaining, 1);
            remaining -= delta;
            return _this._timers[name] = setTimeout(tick, delta * 1000);
          } else {
            _this.$message.removeClass('messenger-retry-soon messenger-retry-later');
            delete _this._timers[name];
            return action.action();
          }
        };
      })(this);
      return tick();
    };

    return RetryingMessage;

  })(_Message);

  _Messenger = (function(superClass) {
    extend(_Messenger, superClass);

    function _Messenger() {
      return _Messenger.__super__.constructor.apply(this, arguments);
    }

    _Messenger.prototype.tagName = 'ul';

    _Messenger.prototype.className = 'messenger';

    _Messenger.prototype.messageDefaults = {
      type: 'info'
    };

    _Messenger.prototype.initialize = function(options1) {
      this.options = options1 != null ? options1 : {};
      this.history = [];
      return this.messageDefaults = $.extend({}, this.messageDefaults, this.options.messageDefaults);
    };

    _Messenger.prototype.render = function() {
      return this.updateMessageSlotClasses();
    };

    _Messenger.prototype.findById = function(id) {
      return _.filter(this.history, function(rec) {
        return rec.msg.options.id === id;
      });
    };

    _Messenger.prototype._reserveMessageSlot = function(msg) {
      var $slot, dmsg;
      $slot = $('<li>');
      $slot.addClass('messenger-message-slot');
      this.$el.prepend($slot);
      this.history.push({
        msg: msg,
        $slot: $slot
      });
      this._enforceIdConstraint(msg);
      msg.on('update', (function(_this) {
        return function() {
          return _this._enforceIdConstraint(msg);
        };
      })(this));
      while (this.options.maxMessages && this.history.length > this.options.maxMessages) {
        dmsg = this.history.shift();
        dmsg.msg.remove();
        dmsg.$slot.remove();
      }
      return $slot;
    };

    _Messenger.prototype._enforceIdConstraint = function(msg) {
      var _msg, entry, i, len, ref2;
      if (msg.options.id == null) {
        return;
      }
      ref2 = this.history;
      for (i = 0, len = ref2.length; i < len; i++) {
        entry = ref2[i];
        _msg = entry.msg;
        if ((_msg.options.id != null) && _msg.options.id === msg.options.id && msg !== _msg) {
          if (msg.options.singleton) {
            msg.hide();
            return;
          } else {
            _msg.hide();
          }
        }
      }
    };

    _Messenger.prototype.newMessage = function(opts) {
      var msg, ref2, ref3, ref4;
      if (opts == null) {
        opts = {};
      }
      opts.messenger = this;
      _Message = (ref2 = (ref3 = Messenger.themes[(ref4 = opts.theme) != null ? ref4 : this.options.theme]) != null ? ref3.Message : void 0) != null ? ref2 : RetryingMessage;
      msg = new _Message(opts);
      msg.on('show', (function(_this) {
        return function() {
          if (opts.scrollTo && _this.$el.css('position') !== 'fixed') {
            return msg.scrollTo();
          }
        };
      })(this));
      msg.on('hide show render', this.updateMessageSlotClasses, this);
      return msg;
    };

    _Messenger.prototype.updateMessageSlotClasses = function() {
      var anyShown, i, last, len, rec, ref2, willBeFirst;
      willBeFirst = true;
      last = null;
      anyShown = false;
      ref2 = this.history;
      for (i = 0, len = ref2.length; i < len; i++) {
        rec = ref2[i];
        rec.$slot.removeClass('messenger-first messenger-last messenger-shown');
        if (rec.msg.shown && rec.msg.rendered) {
          rec.$slot.addClass('messenger-shown');
          anyShown = true;
          last = rec;
          if (willBeFirst) {
            willBeFirst = false;
            rec.$slot.addClass('messenger-first');
          }
        }
      }
      if (last != null) {
        last.$slot.addClass('messenger-last');
      }
      return this.$el[(anyShown ? 'remove' : 'add') + "Class"]('messenger-empty');
    };

    _Messenger.prototype.hideAll = function() {
      var i, len, rec, ref2, results;
      ref2 = this.history;
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        rec = ref2[i];
        results.push(rec.msg.hide());
      }
      return results;
    };

    _Messenger.prototype.post = function(opts) {
      var msg;
      if (_.isString(opts)) {
        opts = {
          message: opts
        };
      }
      opts = $.extend(true, {}, this.messageDefaults, opts);
      msg = this.newMessage(opts);
      msg.update(opts);
      return msg;
    };

    return _Messenger;

  })(BaseView);

  ActionMessenger = (function(superClass) {
    extend(ActionMessenger, superClass);

    function ActionMessenger() {
      return ActionMessenger.__super__.constructor.apply(this, arguments);
    }

    ActionMessenger.prototype.doDefaults = {
      progressMessage: null,
      successMessage: null,
      errorMessage: "Error connecting to the server.",
      showSuccessWithoutError: true,
      retry: {
        auto: true,
        allow: true
      },
      action: $.ajax
    };

    ActionMessenger.prototype.hookBackboneAjax = function(msgr_opts) {
      var _ajax;
      if (msgr_opts == null) {
        msgr_opts = {};
      }
      if (window.Backbone == null) {
        throw 'Expected Backbone to be defined';
      }
      msgr_opts = _.defaults(msgr_opts, {
        id: 'BACKBONE_ACTION',
        errorMessage: false,
        successMessage: "Request completed successfully.",
        showSuccessWithoutError: false
      });
      _ajax = (function(_this) {
        return function(options) {
          var sync_msgr_opts;
          sync_msgr_opts = _.extend({}, msgr_opts, options.messenger);
          return _this["do"](sync_msgr_opts, options);
        };
      })(this);
      if (Backbone.ajax != null) {
        if (Backbone.ajax._withoutMessenger) {
          Backbone.ajax = Backbone.ajax._withoutMessenger;
        }
        if ((msgr_opts.action == null) || msgr_opts.action === this.doDefaults.action) {
          msgr_opts.action = Backbone.ajax;
        }
        _ajax._withoutMessenger = Backbone.ajax;
        return Backbone.ajax = _ajax;
      } else {
        return Backbone.sync = _.wrap(Backbone.sync, function() {
          var _old_ajax, _old_sync, args;
          _old_sync = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          _old_ajax = $.ajax;
          $.ajax = _ajax;
          _old_sync.call.apply(_old_sync, [this].concat(slice.call(args)));
          return $.ajax = _old_ajax;
        });
      }
    };

    ActionMessenger.prototype._getHandlerResponse = function(returnVal) {
      if (returnVal === false) {
        return false;
      }
      if (returnVal === true || (returnVal == null)) {
        return true;
      }
      return returnVal;
    };

    ActionMessenger.prototype._parseEvents = function(events) {
      var desc, firstSpace, func, label, out, type;
      if (events == null) {
        events = {};
      }
      out = {};
      for (label in events) {
        func = events[label];
        firstSpace = label.indexOf(' ');
        type = label.substring(0, firstSpace);
        desc = label.substring(firstSpace + 1);
        if (out[type] == null) {
          out[type] = {};
        }
        out[type][desc] = func;
      }
      return out;
    };

    ActionMessenger.prototype._normalizeResponse = function() {
      var data, elem, i, len, resp, type, xhr;
      resp = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      type = null;
      xhr = null;
      data = null;
      for (i = 0, len = resp.length; i < len; i++) {
        elem = resp[i];
        if (elem === 'success' || elem === 'timeout' || elem === 'abort') {
          type = elem;
        } else if (((elem != null ? elem.readyState : void 0) != null) && ((elem != null ? elem.responseText : void 0) != null)) {
          xhr = elem;
        } else if (_.isObject(elem)) {
          data = elem;
        }
      }
      return [type, data, xhr];
    };

    ActionMessenger.prototype.run = function() {
      var args, events, getMessageText, handler, handlers, m_opts, msg, old, opts, ref2, type;
      m_opts = arguments[0], opts = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (opts == null) {
        opts = {};
      }
      m_opts = $.extend(true, {}, this.messageDefaults, this.doDefaults, m_opts != null ? m_opts : {});
      events = this._parseEvents(m_opts.events);
      getMessageText = (function(_this) {
        return function(type, xhr) {
          var message;
          message = m_opts[type + 'Message'];
          if (_.isFunction(message)) {
            return message.call(_this, type, xhr);
          }
          return message;
        };
      })(this);
      msg = (ref2 = m_opts.messageInstance) != null ? ref2 : this.newMessage(m_opts);
      if (m_opts.id != null) {
        msg.options.id = m_opts.id;
      }
      if (m_opts.progressMessage != null) {
        msg.update($.extend({}, m_opts, {
          message: getMessageText('progress', null),
          type: 'info'
        }));
      }
      handlers = {};
      _.each(['error', 'success'], (function(_this) {
        return function(type) {
          var originalHandler;
          originalHandler = opts[type];
          return handlers[type] = function() {
            var data, defaultOpts, handlerResp, msgOpts, reason, ref3, ref4, ref5, ref6, ref7, resp, responseOpts, xhr;
            resp = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            ref3 = _this._normalizeResponse.apply(_this, resp), reason = ref3[0], data = ref3[1], xhr = ref3[2];
            if (type === 'success' && (msg.errorCount == null) && m_opts.showSuccessWithoutError === false) {
              m_opts['successMessage'] = null;
            }
            if (type === 'error') {
              if (m_opts.errorCount == null) {
                m_opts.errorCount = 0;
              }
              m_opts.errorCount += 1;
            }
            handlerResp = m_opts.returnsPromise ? resp[0] : typeof originalHandler === "function" ? originalHandler.apply(null, resp) : void 0;
            responseOpts = _this._getHandlerResponse(handlerResp);
            if (_.isString(responseOpts)) {
              responseOpts = {
                message: responseOpts
              };
            }
            if (type === 'error' && ((xhr != null ? xhr.status : void 0) === 0 || reason === 'abort')) {
              msg.hide();
              return;
            }
            if (type === 'error' && ((m_opts.ignoredErrorCodes != null) && (ref4 = xhr != null ? xhr.status : void 0, indexOf.call(m_opts.ignoredErrorCodes, ref4) >= 0))) {
              msg.hide();
              return;
            }
            defaultOpts = {
              message: getMessageText(type, xhr),
              type: type,
              events: (ref5 = events[type]) != null ? ref5 : {},
              hideOnNavigate: type === 'success'
            };
            msgOpts = $.extend({}, m_opts, defaultOpts, responseOpts);
            if (typeof ((ref6 = msgOpts.retry) != null ? ref6.allow : void 0) === 'number') {
              msgOpts.retry.allow--;
            }
            if (type === 'error' && (xhr != null ? xhr.status : void 0) >= 500 && ((ref7 = msgOpts.retry) != null ? ref7.allow : void 0)) {
              if (msgOpts.retry.delay == null) {
                if (msgOpts.errorCount < 4) {
                  msgOpts.retry.delay = 10;
                } else {
                  msgOpts.retry.delay = 5 * 60;
                }
              }
              if (msgOpts.hideAfter) {
                if (msgOpts._hideAfter == null) {
                  msgOpts._hideAfter = msgOpts.hideAfter;
                }
                msgOpts.hideAfter = msgOpts._hideAfter + msgOpts.retry.delay;
              }
              msgOpts._retryActions = true;
              msgOpts.actions = {
                retry: {
                  label: 'retry now',
                  phrase: 'Retrying TIME',
                  auto: msgOpts.retry.auto,
                  delay: msgOpts.retry.delay,
                  action: function() {
                    msgOpts.messageInstance = msg;
                    return setTimeout(function() {
                      return _this["do"].apply(_this, [msgOpts, opts].concat(slice.call(args)));
                    }, 0);
                  }
                },
                cancel: {
                  action: function() {
                    return msg.cancel();
                  }
                }
              };
            } else if (msgOpts._retryActions) {
              delete msgOpts.actions.retry;
              delete msgOpts.actions.cancel;
              delete m_opts._retryActions;
            }
            msg.update(msgOpts);
            if (responseOpts && msgOpts.message) {
              Messenger(_.extend({}, _this.options, {
                instance: _this
              }));
              return msg.show();
            } else {
              return msg.hide();
            }
          };
        };
      })(this));
      if (!m_opts.returnsPromise) {
        for (type in handlers) {
          handler = handlers[type];
          old = opts[type];
          opts[type] = handler;
        }
      }
      msg._actionInstance = m_opts.action.apply(m_opts, [opts].concat(slice.call(args)));
      if (m_opts.returnsPromise) {
        msg._actionInstance.then(handlers.success, handlers.error);
      }
      return msg;
    };

    ActionMessenger.prototype["do"] = ActionMessenger.prototype.run;

    ActionMessenger.prototype.ajax = function() {
      var args, m_opts;
      m_opts = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      m_opts.action = $.ajax;
      return this.run.apply(this, [m_opts].concat(slice.call(args)));
    };

    ActionMessenger.prototype.expectPromise = function(action, m_opts) {
      m_opts = _.extend({}, m_opts, {
        action: action,
        returnsPromise: true
      });
      return this.run(m_opts);
    };

    ActionMessenger.prototype.error = function(m_opts) {
      if (m_opts == null) {
        m_opts = {};
      }
      if (typeof m_opts === 'string') {
        m_opts = {
          message: m_opts
        };
      }
      m_opts.type = 'error';
      return this.post(m_opts);
    };

    ActionMessenger.prototype.info = function(m_opts) {
      if (m_opts == null) {
        m_opts = {};
      }
      if (typeof m_opts === 'string') {
        m_opts = {
          message: m_opts
        };
      }
      m_opts.type = 'info';
      return this.post(m_opts);
    };

    ActionMessenger.prototype.success = function(m_opts) {
      if (m_opts == null) {
        m_opts = {};
      }
      if (typeof m_opts === 'string') {
        m_opts = {
          message: m_opts
        };
      }
      m_opts.type = 'success';
      return this.post(m_opts);
    };

    return ActionMessenger;

  })(_Messenger);

  $.fn.messenger = function() {
    var $el, args, func, instance, opts, ref2, ref3, ref4;
    func = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (func == null) {
      func = {};
    }
    $el = this;
    if ((func == null) || !_.isString(func)) {
      opts = func;
      if ($el.data('messenger') == null) {
        _Messenger = (ref2 = (ref3 = Messenger.themes[opts.theme]) != null ? ref3.Messenger : void 0) != null ? ref2 : ActionMessenger;
        $el.data('messenger', instance = new _Messenger($.extend({
          el: $el
        }, opts)));
        instance.render();
      }
      return $el.data('messenger');
    } else {
      return (ref4 = $el.data('messenger'))[func].apply(ref4, args);
    }
  };

  window.Messenger._call = function(opts) {
    var $el, $parent, choosen_loc, chosen_loc, classes, defaultOpts, i, inst, len, loc, locations;
    defaultOpts = {
      extraClasses: 'messenger-fixed messenger-on-bottom messenger-on-right',
      theme: 'future',
      maxMessages: 9,
      parentLocations: ['body']
    };
    opts = $.extend(defaultOpts, $._messengerDefaults, Messenger.options, opts);
    if (opts.theme != null) {
      opts.extraClasses += " messenger-theme-" + opts.theme;
    }
    inst = opts.instance || Messenger.instance;
    if (opts.instance == null) {
      locations = opts.parentLocations;
      $parent = null;
      choosen_loc = null;
      for (i = 0, len = locations.length; i < len; i++) {
        loc = locations[i];
        $parent = $(loc);
        if ($parent.length) {
          chosen_loc = loc;
          break;
        }
      }
      if (!inst) {
        $el = $('<ul>');
        $parent.prepend($el);
        inst = $el.messenger(opts);
        inst._location = chosen_loc;
        Messenger.instance = inst;
      } else if (!$(inst._location).is($(chosen_loc))) {
        inst.$el.detach();
        $parent.prepend(inst.$el);
      }
    }
    if (inst._addedClasses != null) {
      inst.$el.removeClass(inst._addedClasses);
    }
    inst.$el.addClass(classes = inst.className + " " + opts.extraClasses);
    inst._addedClasses = classes;
    return inst;
  };

  $.extend(Messenger, {
    Message: RetryingMessage,
    Messenger: ActionMessenger,
    themes: (ref2 = Messenger.themes) != null ? ref2 : {}
  });

  $.globalMessenger = window.Messenger = Messenger;

}).call(this);
